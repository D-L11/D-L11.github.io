<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>js设计模式系列篇：观察者模式</title>
    <link href="/2022/02/23/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E7%AF%87%EF%BC%9A%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/02/23/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E7%AF%87%EF%BC%9A%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>观察者(observer)模式是js中应用很广泛的一种设计模式。它主要是通过在一个<strong>目标对象上维护一系列依附于它的观察者(observer)对象来实现</strong>，在目标对象上有任何状态改变时，会自动地通知给观察者。<br/></p><p>先来看一个简单的实现</p><h3 id="观察者的实现"><a href="#观察者的实现" class="headerlink" title="观察者的实现"></a>观察者的实现</h3><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Observer</span> &#123;<br>    <span class="hljs-title function_">constructor</span> () &#123;&#125;<br><br>    update (context) &#123;<br>        <span class="hljs-comment">//观察者收到通知后触发的函数</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`recieved data is <span class="hljs-subst">$&#123;context&#125;</span>`</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上是简单的观察者的定义。<strong>目标对象</strong>在需要的时候可以触发update函数以实现对<strong>观察者</strong>的通知。</p><h3 id="观察者列表"><a href="#观察者列表" class="headerlink" title="观察者列表"></a>观察者列表</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//观察者列表</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ObserverList</span> &#123;<br>    <span class="hljs-title function_">constructor</span> () &#123;<br>        <span class="hljs-comment">//用数组去保存观察者</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span> = []<br>    &#125;<br>    <span class="hljs-comment">//添加一个观察者</span><br>    add (observer) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">push</span>(observer)<br>    &#125;<br>    <span class="hljs-comment">//获取观察者的个数</span><br>    count () &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-property">length</span><br>    &#125;<br>    <span class="hljs-comment">//移除观察者</span><br>    remove (observer) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item !== observer)<br>    &#125;<br>    <span class="hljs-comment">//获取观察者</span><br>    getIndexAt (index) &#123;<br>        <span class="hljs-keyword">if</span> (index &gt; -<span class="hljs-number">1</span> &amp;&amp; index &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">count</span>()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>[index]<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上是<strong>观察者列表</strong>，list数组中保存的是一个个Observer类的实例，即<strong>观察者</strong>。我们可以用该类，对依附在某一个<strong>目标对象</strong>上的<strong>观察者</strong>进行统一的管理和维护。</p><h3 id="目标对象"><a href="#目标对象" class="headerlink" title="目标对象"></a>目标对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//目标对象</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Subject</span> &#123;<br>    <span class="hljs-title function_">constructor</span> () &#123;<br>        <span class="hljs-comment">//观察者依附于目标对象上</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">observers</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObserverList</span>()<br>    &#125;<br>    <span class="hljs-comment">//在目标对象上新增一个观察者</span><br>    addObserver (observer) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">observers</span>.<span class="hljs-title function_">add</span>(observer)<br>    &#125;<br>    <span class="hljs-comment">//从目标对象上移除观察者</span><br>    removeObserver (observer) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">observers</span>.<span class="hljs-title function_">remove</span>(observer)<br>    &#125;<br>    <span class="hljs-comment">//通知观察者</span><br>    notify (context) &#123;<br>        <span class="hljs-keyword">const</span> len = <span class="hljs-variable language_">this</span>.<span class="hljs-property">observers</span>.<span class="hljs-title function_">count</span>()<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">observers</span>.<span class="hljs-title function_">getIndexAt</span>(i).<span class="hljs-title function_">update</span>(context)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>从以上代码可以看到，<strong>目标对象</strong>实例上挂载了一个ObserverList实例对象。用来保存依附在该<strong>目标对象</strong>上的所有观察者。当<strong>目标对象</strong>状态有变化时，可以通过notify函数，遍历触发所有<strong>观察者</strong>上的update函数，以此来实现对<strong>所有观察者的通知</strong></p><p>代码实现完毕，我们现在来试验一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//创建观察者</span><br><span class="hljs-keyword">const</span> observer1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Observer</span>()<br><span class="hljs-keyword">const</span> observer2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Observer</span>()<br><span class="hljs-comment">//创建一个目标对象</span><br><span class="hljs-keyword">const</span> subject = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Subject</span>()<br><span class="hljs-comment">//将两个观察者加入到目标对象上的观察者列表中</span><br>subject.<span class="hljs-title function_">addObserver</span>(observer1)<br>subject.<span class="hljs-title function_">addObserver</span>(observer2)<br><span class="hljs-comment">//通知观察者</span><br>subject.<span class="hljs-title function_">notify</span>(<span class="hljs-string">&#x27;hello my observer&#x27;</span>)<br></code></pre></td></tr></table></figure><p>运行以上代码，可以在控制台看到输出了两次，如下图</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/87ee61e051d8486c8bf5ef598b2b8303~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>这就说明<strong>目标对象</strong>成功通知到了依附在自身的两个<strong>观察者</strong>。</p><p>我们来试验一下移除观察者功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//创建观察者</span><br><span class="hljs-keyword">const</span> observer1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Observer</span>()<br><span class="hljs-keyword">const</span> observer2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Observer</span>()<br><span class="hljs-comment">//创建一个目标对象</span><br><span class="hljs-keyword">const</span> subject = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Subject</span>()<br><span class="hljs-comment">//将两个观察者加入到目标对象上的观察者列表中</span><br>subject.<span class="hljs-title function_">addObserver</span>(observer1)<br>subject.<span class="hljs-title function_">addObserver</span>(observer2)<br><span class="hljs-comment">//移除观察者</span><br>subject.<span class="hljs-title function_">removeObserver</span>(observer1)<br><span class="hljs-comment">//通知观察者</span><br>subject.<span class="hljs-title function_">notify</span>(<span class="hljs-string">&#x27;hello my observer&#x27;</span>)<br></code></pre></td></tr></table></figure><p>以上代码中，<strong>目标对象</strong>在通知<strong>观察者</strong>之前移除了其中一个观察者，所以我们可以看到控制台只打印了一次消息</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/307bf98233e04feebeac4ab5ebb0c799~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="小案例-画彩虹"><a href="#小案例-画彩虹" class="headerlink" title="小案例-画彩虹"></a>小案例-画彩虹</h2><p>在了解完具体的观察者模式之后，我们来实现一个小案例。最终的效果如下图</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a36ab8a63fb347f982420a6b429f4e6a~tplv-k3u1fbpfcp-watermark.image" alt="20211025-165418.gif"></p><p>实现出来的效果是，按住下方的小黑圈左右拖动，上方的7个彩虹颜色的div的宽度也会相应地放大和缩小。</p><p>在本案例中，小黑圈就是<strong>目标对象</strong>，7个彩虹颜色地div就是<strong>依附在该小黑圈中的观察者</strong>。当小黑圈的坐标发生变化时，需要通知给这些观察者，告诉他们需要改变自身的宽度。</p><p>下面来看具体的实现</p><h3 id="html结构"><a href="#html结构" class="headerlink" title="html结构"></a>html结构</h3><p>样式部分省略</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;rainbow&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: rgb(255,0,0);&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;rainbow&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: rgb(255,165,0);&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;rainbow&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: rgb(255,255,0);&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;rainbow&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: rgb(0,255,0);&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;rainbow&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: rgb(0,127,255);&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;rainbow&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: rgb(0,0,255);&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;rainbow&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: rgb(139,0,255);&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;progress-bar&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="定义observer"><a href="#定义observer" class="headerlink" title="定义observer"></a>定义observer</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Observer</span> &#123;<br>    <span class="hljs-comment">//item是需要充当观察者的7个div元素</span><br>    <span class="hljs-title function_">constructor</span> (item) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">item</span> = item<br>    &#125;<br>    <span class="hljs-comment">//观察者收到通知时，更新自身的width</span><br>    update (data) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">item</span>.<span class="hljs-property">style</span>.<span class="hljs-property">width</span> = data + <span class="hljs-string">&#x27;px&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="定义观察者列表"><a href="#定义观察者列表" class="headerlink" title="定义观察者列表"></a>定义观察者列表</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//观察者列表，跟之前实现的差不多</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ObserverList</span> &#123;<br>    <span class="hljs-title function_">constructor</span> () &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span> = []<br>    &#125;<br><br>    add (observers) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">push</span>(observers)<br>    &#125;<br><br>    count () &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-property">length</span><br>    &#125;<br><br>    getIndexAt (index) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>[index]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="目标对象-1"><a href="#目标对象-1" class="headerlink" title="目标对象"></a>目标对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//目标对象的实现也基本上一样</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Subject</span> &#123;<br>    <span class="hljs-title function_">constructor</span> (subject) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">observers</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObserverList</span>()<br>    &#125;<br><br>    addObserver (observers) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">observers</span>.<span class="hljs-title function_">add</span>(observers)<br>    &#125;<br><br>    notify (data) &#123;<br>        <span class="hljs-keyword">const</span> len = <span class="hljs-variable language_">this</span>.<span class="hljs-property">observers</span>.<span class="hljs-title function_">count</span>()<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">observers</span>.<span class="hljs-title function_">getIndexAt</span>(i).<span class="hljs-title function_">update</span>(data)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>之后我们要做的就是，获取7个div元素充当观察者，并添加到我们实例化的目标对象上。如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> rainbows = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;.rainbow&#x27;</span>)<br><span class="hljs-keyword">const</span> bar = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;progress-bar&#x27;</span>)<br><span class="hljs-keyword">const</span> barSubject = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Subject</span>()<br>rainbows.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> observer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Observer</span>(item)<br>    barSubject.<span class="hljs-title function_">addObserver</span>(observer)<br>&#125;)<br></code></pre></td></tr></table></figure><p>在上面的代码中，我们获取了7个div对象，并遍历用每一个div实例化一个Observer，并添加到<strong>目标对象</strong>上。</p><p>之后要做的就是实现<strong>目标对象</strong>的拖放，并在拖放过程中通知<strong>观察者</strong>即可，实现拖放的部分省略，这里给出通知给观察者的部分，如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-property">onmousemove</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br><br>    event = event || <span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>;<br><br>    <span class="hljs-keyword">const</span> sl = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">scrollLeft</span> || <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">scrollLeft</span>;<br><br>    <span class="hljs-keyword">const</span> left = event.<span class="hljs-property">clientX</span> - ol;<br>    box.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = left + sl + <span class="hljs-string">&quot;px&quot;</span>;<br>    <span class="hljs-comment">//通知观察者</span><br>    barSubject.<span class="hljs-title function_">notify</span>(left + sl)<br>&#125;<br></code></pre></td></tr></table></figure><p>到此，案例就完成了。希望对大家有所帮助。有不对的地方欢迎大佬们指正。</p><p><strong>注意：观察者模式和大家熟知的发布/订阅者模式是有区别的，我会在下一篇文章中介绍</strong></p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5分钟入门webpack</title>
    <link href="/2022/02/21/5%E5%88%86%E9%92%9F%E5%85%A5%E9%97%A8webpack/"/>
    <url>/2022/02/21/5%E5%88%86%E9%92%9F%E5%85%A5%E9%97%A8webpack/</url>
    
    <content type="html"><![CDATA[<p>要学习webpack之前，我觉得有必要了解一下模块化的概念。<br/></p><h1 id="什么是模块"><a href="#什么是模块" class="headerlink" title="什么是模块"></a>什么是模块</h1><p>在过去很长的一段时间里，javascript并没有模块这个概念。如果我们要在页面中引用其他的js文件，只能通过script标签将其一个个插入到页面中。这样做有很多的缺陷，比如无法在页面中清晰地看出这些js文件之间的依赖关系。而且在script标签中顶层作用域即全局作用域，这会造成全局作用域污染，在一个团队协作的大型项目中，非常容易引发命名冲突等问题。<br/><br>模块化解决了上述几个问题，在一个模块化的js文件中，可以通过导入导出语句很清晰地看出依赖关系，而且每个模块的作用域都是独立的，不会污染全局，彼此也不会有命名冲突，极大地提升了一个大型项目的开发效率，可维护性。<br>社区也诞生了几种模块化规范，如<strong>CommonJs,AMD,UMD还有与ES6一起发布的ES6 Module等</strong>大家可以自行了解一下。<br/></p><h1 id="什么是webpack"><a href="#什么是webpack" class="headerlink" title="什么是webpack"></a>什么是webpack</h1><p><strong>在了解过什么是模块之后，简单地讲，webpack就是用来实现模块化javascript的打包工具</strong><br/><br>在webpack中，每个文件都是单独的一个模块，之后通过用loader转换，通过plugin注入钩子，最终输出一个由多个模块组成的文件。我们只需要在html文件中引用最终输出的文件即可。</p><h2 id="看一个简单的例子。"><a href="#看一个简单的例子。" class="headerlink" title="看一个简单的例子。"></a>看一个简单的例子。</h2><p>以下是目录结构</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/97b70ea4042b474cb89afa04a7013a7e~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="webpack-config-js文件"><a href="#webpack-config-js文件" class="headerlink" title="webpack.config.js文件"></a>webpack.config.js文件</h3><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">entry</span>: &#123;<br>        <span class="hljs-attr">main</span>: <span class="hljs-string">&#x27;./main.js&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;/dist&#x27;</span>),<br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;bundle.js&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>该文件是webpack的配置文件，webpack会从该文件读取配置<br/><br><strong>entry:</strong> 用来指明整个项目的入口文件，webpack会从该文件开始，递归地解析出所有的模块<br/><br><strong>output.path:</strong> 输出文件的存放路径，必须是绝对路径</br><br><strong>output.filename:</strong> 指定最终输出的打包好的文件名字</br></p><h3 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; foo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./foo.js&#x27;</span><br><br><span class="hljs-title function_">foo</span>()<br></code></pre></td></tr></table></figure><h3 id="foo-js"><a href="#foo-js" class="headerlink" title="foo.js"></a>foo.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span> () &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;hello webpack&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./dist/bundle.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span> <br></code></pre></td></tr></table></figure><p>main.js入口文件中引用了foo.js文件，并执行了foo函数，函数会在页面输出 hello webpack。<br/><br>我们在终端执行 <strong>webpack</strong> 命令，可以看到项目中多出了一个dist目录，里面有打包生成的bundle.js文件</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ca73afe60bc54e6ba3fd7c1974a4ad48~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>这就是webpack打包后生成的文件，我们在index.html文件中用script标签引入该文件，到开浏览器就可以看到效果。如图</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2919dbe232b84292a7a5814fe2fd89e1~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>至此，我们已经利用webpack实现了一个简单的模块化项目。</p><h1 id="什么是loader"><a href="#什么是loader" class="headerlink" title="什么是loader"></a>什么是loader</h1><p>webpack原生不支持解析任何非javascript的文件。要解析非javascript文件就需要用到loader。比如在上面的例子中，我们要给文案加点样式，我们就需要写一个css文件。为了加载这个css文件，就需要loader出场了。<br/><br>修改webpack.config.js文件如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">entry</span>: &#123;<br>        <span class="hljs-attr">main</span>: <span class="hljs-string">&#x27;./main.js&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;/dist&#x27;</span>),<br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;bundle.js&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">module</span>: &#123;<br>        <span class="hljs-attr">rules</span>: [<br>            &#123;<br>                <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>                <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>]<br>            &#125;<br>        ]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>新增字段：</strong><br/><br><strong>module:</strong> 配置处理模块的规则<br/><br><strong>rules:</strong> rules配置模块的读取和解析规则，通常用来配置loader。具体用法是利用test,include,exclude三个配置项来指定loader要应用规则的文件。然后用use字段来指定需要用到的loader。需要注意的是，loader是根据use数组倒序执行的。在上面的例子中，所有的css文件都会先交给css-loader处理，处理完之后再交给style-loader处理。</p><p>我们在项目中创建一个css文件，然后再main.js文件中引入，如下</p><h2 id="main-css"><a href="#main-css" class="headerlink" title="main.css"></a>main.css</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">* &#123;<br>    <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="main-js-1"><a href="#main-js-1" class="headerlink" title="main.js"></a>main.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; foo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./foo.js&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./main.css&#x27;</span><br><br><span class="hljs-title function_">foo</span>()<br></code></pre></td></tr></table></figure><p>重新打包，打开浏览器，即可看到字体变成了红色</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/96ecab2dd91942f58f83adf4a28281ef~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>这就是loader的作用。每种文件类型都可以在社区找到对应的loader，比如vue-loader,ts-loader等。大家可以自行了解。</p><h1 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h1><p>plugin用于扩展webpack的功能。通过在构建流程注入钩子来实现，极大地提升了webpack的灵活性。<br/><br>以上面的配置为例，我们在项目中引入一个css文件，并用css-loader和style-loader来加载。最终打包生成的还是只有一个js文件。这是因为所有的样式都以字符串的形式合并到了js文件中。在实际开发中，这很不利于维护和优化。所以我们想要将css文件打包到一个单独文件，再单独引入这个css文件。这个就需要用plugin来实现。修改webpack.config.js文件如下</p><h2 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">MiniCssExtractPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mini-css-extract-plugin&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">entry</span>: &#123;<br>        <span class="hljs-attr">main</span>: <span class="hljs-string">&#x27;./main.js&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;/dist&#x27;</span>),<br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;bundle.js&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">module</span>: &#123;<br>        <span class="hljs-attr">rules</span>: [<br>            &#123;<br>                <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>                <span class="hljs-comment">//这里用插件的loader替换style-loader</span><br>                <span class="hljs-attr">use</span>: [<span class="hljs-title class_">MiniCssExtractPlugin</span>.<span class="hljs-property">loader</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>]<br>            &#125;<br>        ]<br>    &#125;,<br>    <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">MiniCssExtractPlugin</span>(&#123;<br>            <span class="hljs-comment">//提取出来的css文件名称</span><br>            <span class="hljs-attr">filename</span>: <span class="hljs-string">`[name]@[hash].css`</span><br>        &#125;)<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，plugins配置项接受一个数组。数组中是各个plugin的实例。plugin的具体配置需要自己去查询。<br/><br>配置完毕，再次运行webpack命令打包项目，即可看到dist目录下多出了一个css文件，如下图</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/06a09257da3c4dc1a7663efe5cb1e87a~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>名字是我们配置好的css源文件名和文件的哈希值。<br/><br>接下来我们直接在index.html中引入该文件即可。</p><h1 id="devServer"><a href="#devServer" class="headerlink" title="devServer"></a>devServer</h1><p>通过以上的配置，我们可以让webpack正常运行起来，实现打包。但是在实际开发中，每次修改代码都需要打包一次，会让我们的开发效率大大降低。devServer会启动一个http服务器用于服务网页请求，同时会帮助启动webpack,并在监听到文件内容有变化时，通过websocket协议自动刷新页面。</p><p>第一次发文章，有不对的地方欢迎大家指正</p>]]></content>
    
    
    <categories>
      
      <category>webpack</category>
      
    </categories>
    
    
    <tags>
      
      <tag>webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
