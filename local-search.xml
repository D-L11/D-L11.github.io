<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>5分钟入门webpack</title>
    <link href="/2022/02/21/5%E5%88%86%E9%92%9F%E5%85%A5%E9%97%A8webpack/"/>
    <url>/2022/02/21/5%E5%88%86%E9%92%9F%E5%85%A5%E9%97%A8webpack/</url>
    
    <content type="html"><![CDATA[<p>要学习webpack之前，我觉得有必要了解一下模块化的概念。<br/></p><h1 id="什么是模块"><a href="#什么是模块" class="headerlink" title="什么是模块"></a>什么是模块</h1><p>在过去很长的一段时间里，javascript并没有模块这个概念。如果我们要在页面中引用其他的js文件，只能通过script标签将其一个个插入到页面中。这样做有很多的缺陷，比如无法在页面中清晰地看出这些js文件之间的依赖关系。而且在script标签中顶层作用域即全局作用域，这会造成全局作用域污染，在一个团队协作的大型项目中，非常容易引发命名冲突等问题。<br/><br>模块化解决了上述几个问题，在一个模块化的js文件中，可以通过导入导出语句很清晰地看出依赖关系，而且每个模块的作用域都是独立的，不会污染全局，彼此也不会有命名冲突，极大地提升了一个大型项目的开发效率，可维护性。<br>社区也诞生了几种模块化规范，如<strong>CommonJs,AMD,UMD还有与ES6一起发布的ES6 Module等</strong>大家可以自行了解一下。<br/></p><h1 id="什么是webpack"><a href="#什么是webpack" class="headerlink" title="什么是webpack"></a>什么是webpack</h1><p><strong>在了解过什么是模块之后，简单地讲，webpack就是用来实现模块化javascript的打包工具</strong><br/><br>在webpack中，每个文件都是单独的一个模块，之后通过用loader转换，通过plugin注入钩子，最终输出一个由多个模块组成的文件。我们只需要在html文件中引用最终输出的文件即可。</p><h2 id="看一个简单的例子。"><a href="#看一个简单的例子。" class="headerlink" title="看一个简单的例子。"></a>看一个简单的例子。</h2><p>以下是目录结构</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/97b70ea4042b474cb89afa04a7013a7e~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="webpack-config-js文件"><a href="#webpack-config-js文件" class="headerlink" title="webpack.config.js文件"></a>webpack.config.js文件</h3><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">entry</span>: &#123;<br>        <span class="hljs-attr">main</span>: <span class="hljs-string">&#x27;./main.js&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;/dist&#x27;</span>),<br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;bundle.js&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>该文件是webpack的配置文件，webpack会从该文件读取配置<br/><br><strong>entry:</strong> 用来指明整个项目的入口文件，webpack会从该文件开始，递归地解析出所有的模块<br/><br><strong>output.path:</strong> 输出文件的存放路径，必须是绝对路径</br><br><strong>output.filename:</strong> 指定最终输出的打包好的文件名字</br></p><h3 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; foo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./foo.js&#x27;</span><br><br><span class="hljs-title function_">foo</span>()<br></code></pre></td></tr></table></figure><h3 id="foo-js"><a href="#foo-js" class="headerlink" title="foo.js"></a>foo.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span> () &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;hello webpack&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./dist/bundle.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span> <br></code></pre></td></tr></table></figure><p>main.js入口文件中引用了foo.js文件，并执行了foo函数，函数会在页面输出 hello webpack。<br/><br>我们在终端执行 <strong>webpack</strong> 命令，可以看到项目中多出了一个dist目录，里面有打包生成的bundle.js文件</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ca73afe60bc54e6ba3fd7c1974a4ad48~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>这就是webpack打包后生成的文件，我们在index.html文件中用script标签引入该文件，到开浏览器就可以看到效果。如图</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2919dbe232b84292a7a5814fe2fd89e1~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>至此，我们已经利用webpack实现了一个简单的模块化项目。</p><h1 id="什么是loader"><a href="#什么是loader" class="headerlink" title="什么是loader"></a>什么是loader</h1><p>webpack原生不支持解析任何非javascript的文件。要解析非javascript文件就需要用到loader。比如在上面的例子中，我们要给文案加点样式，我们就需要写一个css文件。为了加载这个css文件，就需要loader出场了。<br/><br>修改webpack.config.js文件如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">entry</span>: &#123;<br>        <span class="hljs-attr">main</span>: <span class="hljs-string">&#x27;./main.js&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;/dist&#x27;</span>),<br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;bundle.js&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">module</span>: &#123;<br>        <span class="hljs-attr">rules</span>: [<br>            &#123;<br>                <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>                <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>]<br>            &#125;<br>        ]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>新增字段：</strong><br/><br><strong>module:</strong> 配置处理模块的规则<br/><br><strong>rules:</strong> rules配置模块的读取和解析规则，通常用来配置loader。具体用法是利用test,include,exclude三个配置项来指定loader要应用规则的文件。然后用use字段来指定需要用到的loader。需要注意的是，loader是根据use数组倒序执行的。在上面的例子中，所有的css文件都会先交给css-loader处理，处理完之后再交给style-loader处理。</p><p>我们在项目中创建一个css文件，然后再main.js文件中引入，如下</p><h2 id="main-css"><a href="#main-css" class="headerlink" title="main.css"></a>main.css</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">* &#123;<br>    <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="main-js-1"><a href="#main-js-1" class="headerlink" title="main.js"></a>main.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; foo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./foo.js&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./main.css&#x27;</span><br><br><span class="hljs-title function_">foo</span>()<br></code></pre></td></tr></table></figure><p>重新打包，打开浏览器，即可看到字体变成了红色</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/96ecab2dd91942f58f83adf4a28281ef~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>这就是loader的作用。每种文件类型都可以在社区找到对应的loader，比如vue-loader,ts-loader等。大家可以自行了解。</p><h1 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h1><p>plugin用于扩展webpack的功能。通过在构建流程注入钩子来实现，极大地提升了webpack的灵活性。<br/><br>以上面的配置为例，我们在项目中引入一个css文件，并用css-loader和style-loader来加载。最终打包生成的还是只有一个js文件。这是因为所有的样式都以字符串的形式合并到了js文件中。在实际开发中，这很不利于维护和优化。所以我们想要将css文件打包到一个单独文件，再单独引入这个css文件。这个就需要用plugin来实现。修改webpack.config.js文件如下</p><h2 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">MiniCssExtractPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mini-css-extract-plugin&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">entry</span>: &#123;<br>        <span class="hljs-attr">main</span>: <span class="hljs-string">&#x27;./main.js&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;/dist&#x27;</span>),<br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;bundle.js&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">module</span>: &#123;<br>        <span class="hljs-attr">rules</span>: [<br>            &#123;<br>                <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>                <span class="hljs-comment">//这里用插件的loader替换style-loader</span><br>                <span class="hljs-attr">use</span>: [<span class="hljs-title class_">MiniCssExtractPlugin</span>.<span class="hljs-property">loader</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>]<br>            &#125;<br>        ]<br>    &#125;,<br>    <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">MiniCssExtractPlugin</span>(&#123;<br>            <span class="hljs-comment">//提取出来的css文件名称</span><br>            <span class="hljs-attr">filename</span>: <span class="hljs-string">`[name]@[hash].css`</span><br>        &#125;)<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，plugins配置项接受一个数组。数组中是各个plugin的实例。plugin的具体配置需要自己去查询。<br/><br>配置完毕，再次运行webpack命令打包项目，即可看到dist目录下多出了一个css文件，如下图</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/06a09257da3c4dc1a7663efe5cb1e87a~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>名字是我们配置好的css源文件名和文件的哈希值。<br/><br>接下来我们直接在index.html中引入该文件即可。</p><h1 id="devServer"><a href="#devServer" class="headerlink" title="devServer"></a>devServer</h1><p>通过以上的配置，我们可以让webpack正常运行起来，实现打包。但是在实际开发中，每次修改代码都需要打包一次，会让我们的开发效率大大降低。devServer会启动一个http服务器用于服务网页请求，同时会帮助启动webpack,并在监听到文件内容有变化时，通过websocket协议自动刷新页面。</p><p>第一次发文章，有不对的地方欢迎大家指正</p>]]></content>
    
    
    <categories>
      
      <category>webpack</category>
      
    </categories>
    
    
    <tags>
      
      <tag>webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
